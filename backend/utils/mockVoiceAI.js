// utils/mockVoiceAI.js - Temporary mock implementation for testing
import { generativeModel } from './vertex.js';

/**
 * Mock speech-to-text for testing without Google Cloud Speech API
 */
async function mockSpeechToText(audioBuffer, languageCode = 'hi-IN') {
  // Return varied realistic farming queries based on language
  const sampleQueries = {
    'hi-IN': [
      '‡§Æ‡•á‡§∞‡•Ä ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§´‡§∏‡§≤ ‡§Æ‡•á‡§Ç ‡§™‡•Ä‡§≤‡•á ‡§ß‡§¨‡•ç‡§¨‡•á ‡§Ü ‡§ó‡§è ‡§π‡•à‡§Ç, ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?',
      '‡§ü‡§Æ‡§æ‡§ü‡§∞ ‡§ï‡•á ‡§™‡•å‡§ß‡•á ‡§Æ‡•Å‡§∞‡§ù‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à?',
      '‡§ï‡§™‡§æ‡§∏ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡•á‡§¶ ‡§Æ‡§ï‡•ç‡§ñ‡•Ä ‡§ï‡§æ ‡§Ö‡§ü‡•à‡§ï ‡§π‡•à, ‡§ï‡•à‡§∏‡•á ‡§∞‡•ã‡§ï‡•Ç‡§Ç?',
      '‡§ß‡§æ‡§® ‡§ï‡•Ä ‡§¨‡•Å‡§Ü‡§à ‡§ï‡§æ ‡§∏‡§π‡•Ä ‡§∏‡§Æ‡§Ø ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?',
      '‡§Ü‡§ú ‡§Æ‡§Ç‡§°‡•Ä ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§Ø‡§æ‡§ú ‡§ï‡§æ ‡§≠‡§æ‡§µ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?',
      '‡§ñ‡§æ‡§¶ ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä ‡§∏‡•á ‡§™‡§§‡•ç‡§§‡•á ‡§™‡•Ä‡§≤‡•á ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§ï‡•ç‡§Ø‡§æ ‡§°‡§æ‡§≤‡•Ç‡§Ç?'
    ],
    'en-IN': [
      'My wheat crop has yellow spots appearing, what should I do?',
      'The tomato plants are wilting, what could be the problem?',
      'There is a whitefly attack on cotton, how do I control it?',
      'What is the right time for rice sowing?',
      'What is today\'s onion price in the market?',
      'Leaves are turning yellow due to nutrient deficiency, what fertilizer should I use?'
    ],
    'bn-IN': [
      '‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ó‡¶Æ‡ßá‡¶∞ ‡¶´‡¶∏‡¶≤‡ßá ‡¶π‡¶≤‡ßÅ‡¶¶ ‡¶¶‡¶æ‡¶ó ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶¨?',
      '‡¶ü‡¶Æ‡ßá‡¶ü‡ßã ‡¶ó‡¶æ‡¶õ ‡¶∂‡ßÅ‡¶ï‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá, ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶ï‡ßÄ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá?',
      '‡¶§‡ßÅ‡¶≤‡¶æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶¶‡¶æ ‡¶Æ‡¶æ‡¶õ‡¶ø ‡¶Ü‡¶ï‡ßç‡¶∞‡¶Æ‡¶£ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá, ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡ßã‡¶ß ‡¶ï‡¶∞‡¶¨?'
    ],
    'te-IN': [
      '‡∞®‡∞æ ‡∞ó‡±ã‡∞ß‡±Å‡∞Æ ‡∞™‡∞Ç‡∞ü‡∞≤‡±ã ‡∞™‡∞∏‡±Å‡∞™‡±Å ‡∞Æ‡∞ö‡±ç‡∞ö‡∞≤‡±Å ‡∞ï‡∞®‡∞ø‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡¶®‡∞æ‡∞Ø‡∞ø, ‡∞è‡∞Æ‡∞ø ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞ø?',
      '‡∞ü‡∞Æ‡∞æ‡∞ü‡±ã ‡∞Æ‡±ä‡∞ï‡±ç‡∞ï‡∞≤‡±Å ‡∞µ‡∞æ‡∞°‡∞ø‡∞™‡±ã‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø, ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø?',
      '‡∞™‡∞§‡±ç‡∞§‡∞ø‡∞≤‡±ã ‡∞§‡±Ü‡∞≤‡±ç‡∞≤ ‡∞à‡∞ó‡∞≤‡±Å ‡∞¶‡∞æ‡∞°‡∞ø ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø, ‡∞é‡∞≤‡∞æ ‡∞®‡∞ø‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞ø‡∞Ç‡∞ö‡∞æ‡∞≤‡∞ø?'
    ]
  };
  
  const queries = sampleQueries[languageCode] || sampleQueries['en-IN'];
  const randomQuery = queries[Math.floor(Math.random() * queries.length)];
  
  await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate processing time
  console.log(`üé§ Mock query: ${randomQuery}`);
  return randomQuery;
}

/**
 * Mock text-to-speech for testing without Google Cloud TTS API
 */
async function mockTextToSpeech(text, languageCode = 'hi-IN') {
  // Return a small audio buffer placeholder
  const audioData = new ArrayBuffer(1024);
  await new Promise(resolve => setTimeout(resolve, 500)); // Simulate processing time
  return Buffer.from(audioData);
}

/**
 * Enhanced prompt for agricultural advice
 */
function createAgriculturalPrompt(userQuery, context, languageCode) {
  const language = {
    'hi-IN': 'Hindi',
    'en-IN': 'English',
    'bn-IN': 'Bengali',
    'te-IN': 'Telugu',
    'mr-IN': 'Marathi',
    'ta-IN': 'Tamil'
  }[languageCode] || 'English';
  
  return `You are "FarmMitra", an expert agricultural advisor with deep knowledge of Indian farming.

EXPERTISE AREAS:
üåæ Crops: Rice, Wheat, Cotton, Sugarcane, Vegetables, Fruits
üêõ Pest Control: Bollworm, Aphids, Fungal diseases, Bacterial infections  
üíä Treatments: Organic & chemical solutions with proper dosages
üåßÔ∏è Weather: Monsoon, drought, temperature management
üí∞ Economics: Market prices, government schemes, cost optimization

CONTEXT:
Location: ${context.location || 'India'} | Season: ${context.season || 'Current'} | Crop: ${context.crop || 'General'} | Experience: ${context.experience || 'Moderate'}

FARMER ASKS: "${userQuery}"

INSTRUCTIONS:
- Respond ONLY in ${language}
- Give specific, actionable advice
- Include quantities, timing, and costs
- Be encouraging and practical
- Keep response 80-120 words
- End with a helpful follow-up question

Respond as expert FarmMitra in ${language}:`;
}

/**
 * Process voice query using mock services (for testing)
 */
async function processMockVoiceQuery(audioBuffer, inputLanguage = 'hi-IN', context = {}) {
  try {
    console.log('üé§ Using mock voice processing for testing...');
    
    // Step 1: Mock speech-to-text
    const userQuery = await mockSpeechToText(audioBuffer, inputLanguage);
    console.log(`üìù Mock transcription: ${userQuery}`);
    
    // Step 2: Get AI response
    const enhancedPrompt = createAgriculturalPrompt(userQuery, context, inputLanguage);
    console.log('ü§ñ Getting AI response...');
    
    try {
      const result = await generativeModel.generateContent(enhancedPrompt);
      const aiResponse = result.response.candidates[0].content.parts[0].text;
      console.log(`üí¨ AI Response: ${aiResponse}`);
      
      // Step 3: Mock text-to-speech
      const responseAudio = await mockTextToSpeech(aiResponse, inputLanguage);
      
      return {
        userQuery: userQuery,
        text: aiResponse,
        audio: responseAudio,
        language: inputLanguage,
        timestamp: new Date().toISOString(),
        isMock: true
      };
    } catch (aiError) {
      console.error('AI generation error:', aiError);
      
      // Fallback response if AI fails
      const fallbackResponses = {
        'hi-IN': '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§ï‡§ø‡§∏‡§æ‡§® ‡§≠‡§æ‡§à! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•á ‡§ñ‡•á‡§§‡•Ä ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§ ‡§ö‡§æ‡§π‡•á ‡§µ‡•ã ‡§¨‡•Ä‡§ú, ‡§ñ‡§æ‡§¶, ‡§™‡§æ‡§®‡•Ä, ‡§Ø‡§æ ‡§ï‡•Ä‡§°‡§º‡•á-‡§Æ‡§ï‡•ã‡§°‡§º‡•á ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§¶‡•Ç‡§Ç‡§ó‡§æ‡•§',
        'en-IN': 'Hello farmer! I am here to help you with your farming questions. Please ask me about seeds, fertilizers, irrigation, pest control, or any other agricultural concerns you may have.',
        'bn-IN': '‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡ßÉ‡¶∑‡¶ï ‡¶≠‡¶æ‡¶á! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡¶ø‡•§ ‡¶¨‡ßÄ‡¶ú, ‡¶∏‡¶æ‡¶∞, ‡¶ú‡¶≤ ‡¶¨‡¶æ ‡¶ï‡ßÄ‡¶ü‡¶™‡¶§‡¶ô‡ßç‡¶ó ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        'te-IN': '‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç ‡∞∞‡±à‡∞§‡±Å ‡∞ó‡∞æ‡∞∞‡±Å! ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞≤‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ‡∞µ‡∞ø‡∞§‡±ç‡∞§‡∞®‡∞æ‡∞≤‡±Å, ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å, ‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤ ‡∞≤‡±á‡∞¶‡∞æ ‡∞ï‡±Ä‡∞ü‡∞ï ‡∞®‡∞ø‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞£ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡±Å ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø‡•§'
      };
      
      const fallbackResponse = fallbackResponses[inputLanguage] || fallbackResponses['en-IN'];
      const responseAudio = await mockTextToSpeech(fallbackResponse, inputLanguage);
      
      return {
        userQuery: userQuery,
        text: fallbackResponse,
        audio: responseAudio,
        language: inputLanguage,
        timestamp: new Date().toISOString(),
        isMock: true
      };
    }
    
  } catch (error) {
    console.error('Mock voice processing error:', error);
    
    const errorMessages = {
      'hi-IN': '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ FarmMitra ‡§π‡•Ç‡§Å‡•§ ‡§Ö‡§≠‡•Ä ‡§Æ‡•à‡§Ç ‡§°‡•á‡§Æ‡•ã ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ Google Cloud APIs ‡§ï‡•ã ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡•á‡§Ç ‡§™‡•Ç‡§∞‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è‡•§',
      'en-IN': 'Hello! I am your FarmMitra. Currently working in demo mode. Please enable Google Cloud APIs for full functionality.',
      'bn-IN': '‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ FarmMitra‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶Æ‡¶ø ‡¶°‡ßá‡¶Æ‡ßã ‡¶Æ‡ßã‡¶°‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡¶ø‡•§ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Google Cloud APIs ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
      'te-IN': '‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä FarmMitra. ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡¶§‡±Å‡∞§‡∞Ç ‡∞°‡±Ü‡∞Æ‡±ã ‡∞Æ‡±ã‡∞°‡±ç‚Äå‡∞≤‡±ã ‡∞™‡∞®‡∞ø ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞æ‡∞ö‡∞∞‡∞£ ‡∞ï‡±ã‡∞∏‡∞Ç Google Cloud APIs ‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø‡•§'
    };
    
    const errorMessage = errorMessages[inputLanguage] || errorMessages['en-IN'];
    const errorAudio = await mockTextToSpeech(errorMessage, inputLanguage);
    
    return {
      userQuery: 'Sample question about farming',
      text: errorMessage,
      audio: errorAudio,
      language: inputLanguage,
      error: false, // Not actually an error, just demo mode
      timestamp: new Date().toISOString(),
      isMock: true
    };
  }
}

export {
  mockSpeechToText,
  mockTextToSpeech,
  processMockVoiceQuery
};
